// Code generated by sqlc. DO NOT EDIT.
// source: wallet.sql

package db

import (
	"context"
)

const addUserBalance = `-- name: AddUserBalance :exec
UPDATE wallets SET amount =  amount + ? WHERE user_id = ?
`

type AddUserBalanceParams struct {
	Amount int64  `json:"amount"`
	UserID string `json:"user_id"`
}

func (q *Queries) AddUserBalance(ctx context.Context, arg AddUserBalanceParams) error {
	_, err := q.db.ExecContext(ctx, addUserBalance, arg.Amount, arg.UserID)
	return err
}

const createWallet = `-- name: CreateWallet :exec
INSERT INTO wallets (
    id,
    currency_code,
    amount,
    user_id
) VALUES (
  ?, ?, 0, ?
)
`

type CreateWalletParams struct {
	ID           string `json:"id"`
	CurrencyCode string `json:"currency_code"`
	UserID       string `json:"user_id"`
}

func (q *Queries) CreateWallet(ctx context.Context, arg CreateWalletParams) error {
	_, err := q.db.ExecContext(ctx, createWallet, arg.ID, arg.CurrencyCode, arg.UserID)
	return err
}

const getWalletByUser = `-- name: GetWalletByUser :one
SELECT id, currency_code, amount, user_id FROM wallets WHERE user_id = ?
`

func (q *Queries) GetWalletByUser(ctx context.Context, userID string) (Wallet, error) {
	row := q.db.QueryRowContext(ctx, getWalletByUser, userID)
	var i Wallet
	err := row.Scan(
		&i.ID,
		&i.CurrencyCode,
		&i.Amount,
		&i.UserID,
	)
	return i, err
}

const getWalletByUserForUpdate = `-- name: GetWalletByUserForUpdate :one
SELECT id, currency_code, amount, user_id FROM wallets WHERE user_id = ? FOR UPDATE
`

func (q *Queries) GetWalletByUserForUpdate(ctx context.Context, userID string) (Wallet, error) {
	row := q.db.QueryRowContext(ctx, getWalletByUserForUpdate, userID)
	var i Wallet
	err := row.Scan(
		&i.ID,
		&i.CurrencyCode,
		&i.Amount,
		&i.UserID,
	)
	return i, err
}

const reduceUserBalance = `-- name: ReduceUserBalance :exec
UPDATE wallets SET amount =  amount - ? WHERE user_id = ?
`

type ReduceUserBalanceParams struct {
	Amount int64  `json:"amount"`
	UserID string `json:"user_id"`
}

func (q *Queries) ReduceUserBalance(ctx context.Context, arg ReduceUserBalanceParams) error {
	_, err := q.db.ExecContext(ctx, reduceUserBalance, arg.Amount, arg.UserID)
	return err
}
