// Code generated by sqlc. DO NOT EDIT.
// source: user.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :exec
INSERT INTO users (
    id,
    email,
    user_name,
    city,
    country
) VALUES (
  ?, ?, ?, ?, ?
)
`

type CreateUserParams struct {
	ID       string `json:"id"`
	Email    string `json:"email"`
	UserName string `json:"user_name"`
	City     string `json:"city"`
	Country  string `json:"country"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.ExecContext(ctx, createUser,
		arg.ID,
		arg.Email,
		arg.UserName,
		arg.City,
		arg.Country,
	)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, email, user_name, city, country FROM users WHERE id = ?
`

func (q *Queries) GetUser(ctx context.Context, id string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.UserName,
		&i.City,
		&i.Country,
	)
	return i, err
}
